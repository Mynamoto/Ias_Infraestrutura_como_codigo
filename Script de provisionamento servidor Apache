#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import shutil
from datetime import datetime

def log(message):
    """Função para registrar mensagens de log com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def check_root():
    """Verifica se o script está sendo executado como root"""
    if os.geteuid() != 0:
        log("Este script precisa ser executado como root (sudo).")
        sys.exit(1)

def check_apache_installed():
    """Verifica se o Apache está instalado"""
    try:
        subprocess.run(["apache2", "-v"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=False)
        return True
    except FileNotFoundError:
        return False

def install_apache():
    """Instala o servidor Apache"""
    log("Instalando Apache...")
    try:
        subprocess.run(["apt-get", "update"], check=True)
        subprocess.run(["apt-get", "install", "-y", "apache2"], check=True)
        log("Apache instalado com sucesso!")
    except subprocess.CalledProcessError as e:
        log(f"Erro ao instalar Apache: {e}")
        sys.exit(1)

def deploy_application(app_path, app_name=None):
    """Implanta a aplicação no servidor Apache"""
    if not os.path.exists(app_path):
        log(f"Erro: O caminho da aplicação '{app_path}' não existe!")
        sys.exit(1)
    
    # Se app_name não for fornecido, use o nome do diretório
    if app_name is None:
        app_name = os.path.basename(app_path)
    
    # Diretório onde a aplicação será implantada
    deploy_dir = f"/var/www/html/{app_name}"
    
    # Remove o diretório de implantação se já existir
    if os.path.exists(deploy_dir):
        log(f"Removendo implantação anterior de '{app_name}'...")
        try:
            shutil.rmtree(deploy_dir)
        except Exception as e:
            log(f"Erro ao remover diretório anterior: {e}")
            sys.exit(1)
    
    # Cria o diretório de implantação
    try:
        os.makedirs(deploy_dir)
    except Exception as e:
        log(f"Erro ao criar diretório de implantação: {e}")
        sys.exit(1)
    
    # Copia os arquivos da aplicação
    log(f"Copiando arquivos da aplicação para {deploy_dir}...")
    try:
        if os.path.isdir(app_path):
            # Se for um diretório, copia todo o conteúdo
            for item in os.listdir(app_path):
                s = os.path.join(app_path, item)
                d = os.path.join(deploy_dir, item)
                if os.path.isdir(s):
                    shutil.copytree(s, d)
                else:
                    shutil.copy2(s, d)
        else:
            # Se for um arquivo único, copia apenas ele
            shutil.copy2(app_path, deploy_dir)
    except Exception as e:
        log(f"Erro ao copiar arquivos: {e}")
        sys.exit(1)
    
    # Configura as permissões corretas
    try:
        subprocess.run(["chown", "-R", "www-data:www-data", deploy_dir], check=True)
        subprocess.run(["chmod", "-R", "755", deploy_dir], check=True)
    except subprocess.CalledProcessError as e:
        log(f"Erro ao configurar permissões: {e}")
    
    # Cria um VirtualHost para a aplicação
    create_virtualhost(app_name)
    
    # Reinicia o Apache para aplicar as alterações
    restart_apache()
    
    log(f"Aplicação '{app_name}' implantada com sucesso em {deploy_dir}")
    log(f"A aplicação está disponível em: http://localhost/{app_name}")

def create_virtualhost(app_name):
    """Cria um arquivo de configuração VirtualHost para a aplicação"""
    vhost_content = f"""<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html/{app_name}
    ServerName {app_name}.local
    
    <Directory /var/www/html/{app_name}>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Require all granted
    </Directory>
    
    ErrorLog ${{APACHE_LOG_DIR}}/{app_name}_error.log
    CustomLog ${{APACHE_LOG_DIR}}/{app_name}_access.log combined
</VirtualHost>
"""
    
    vhost_path = f"/etc/apache2/sites-available/{app_name}.conf"
    
    try:
        with open(vhost_path, 'w') as f:
            f.write(vhost_content)
        
        # Habilita o site
        subprocess.run(["a2ensite", f"{app_name}.conf"], check=True)
        
        # Adiciona entrada no /etc/hosts
        with open("/etc/hosts", "r") as f:
            hosts_content = f.read()
        
        if f"{app_name}.local" not in hosts_content:
            with open("/etc/hosts", "a") as f:
                f.write(f"\n127.0.0.1 {app_name}.local\n")
        
        log(f"VirtualHost criado para {app_name}")
        
    except Exception as e:
        log(f"Erro ao criar VirtualHost: {e}")

def restart_apache():
    """Reinicia o servidor Apache"""
    log("Reiniciando Apache...")
    try:
        subprocess.run(["systemctl", "restart", "apache2"], check=True)
        log("Apache reiniciado com sucesso!")
    except subprocess.CalledProcessError as e:
        log(f"Erro ao reiniciar Apache: {e}")

def check_apache_status():
    """Verifica o status do Apache"""
    try:
        result = subprocess.run(["systemctl", "status", "apache2"], 
                               stdout=subprocess.PIPE, 
                               stderr=subprocess.PIPE, 
                               text=True, 
                               check=False)
        return "active (running)" in result.stdout
    except Exception:
        return False

def main():
    """Função principal"""
    parser = argparse.ArgumentParser(description='Script para provisionar um servidor Apache e implantar aplicações web.')
    parser.add_argument('app_path', help='Caminho para o diretório ou arquivo da aplicação')
    parser.add_argument('--app-name', help='Nome da aplicação (opcional, usa o nome do diretório por padrão)')
    
    args = parser.parse_args()
    
    # Verifica se está rodando como root
    check_root()
    
    # Verifica se o Apache está instalado, caso contrário instala
    if not check_apache_installed():
        log("Apache não está instalado. Instalando...")
        install_apache()
    else:
        log("Apache já está instalado.")
    
    # Verifica se o Apache está em execução
    if not check_apache_status():
        log("Apache não está em execução. Iniciando...")
        try:
            subprocess.run(["systemctl", "start", "apache2"], check=True)
        except subprocess.CalledProcessError as e:
            log(f"Erro ao iniciar Apache: {e}")
            sys.exit(1)
    
    # Implanta a aplicação no servidor
    deploy_application(args.app_path, args.app_name)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log("\nOperação cancelada pelo usuário.")
        sys.exit(0)
